<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Avi Fox-Rosen</title>
    <description>Web developer, musician, recording fanatic, baker.</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Heroku, Assets, and The AWS Rabbithole</title>
        <description>&lt;p&gt;I’m back from a wonderful week of vacation, and jumping back into developing, applying, and learning. And - I’m working through the kinks of deploying my &lt;a href=&quot;https://github.com/avifoxi/browser-drum-machine&quot;&gt;drum machine app&lt;/a&gt;! Close… but nooooot quite there yet. &lt;/p&gt;

&lt;p&gt;Those familiar with Heroku will be familiar with the handful of stock challenges that Heroku poses for assets. There are 2 types of static assets where a Rails app can get into trouble. Rails compiles and compresses all assets by default, but Heroku will not recompile these files when deploying later iterations. So for CSS and JS files, if you want fluid recompilation on each iteration of your app - best to add the &lt;a href=&quot;https://github.com/heroku/rails_12factor&quot;&gt;12factor gem&lt;/a&gt;, which overrides Heroku’s default and forces the server to recompile assets. Quirky, but a well documented and relatively simple fix. &lt;/p&gt;

&lt;p&gt;We get into more trouble with static assets that demand more storage, and are not integral to business logic of the app. Such as photos, music, and video. &lt;/p&gt;

&lt;p&gt;Heroku reccomends using &lt;a href=&quot;http://aws.amazon.com/s3/&quot;&gt;Amazon Web Services S3&lt;/a&gt; for storage. And I am learning now that configuring these 2 services to work in sync is not quite as obvious as one might hope. No surprises there, I suppose. &lt;/p&gt;

&lt;p&gt;A more in depth blog post is in the works - but this is a configuration brain teaser. The pieces I am juggling include using S3 to store my static music files. Then configuring a virtual machine instance (EC2) to serve these assets to my app. And ensuring security at each stage with keys and configuration. I do feel a bit like I am building a Rube Goldberb machine to make a piece of toast… but I also think that configuring this setup will be worth the investment of time in the future– especially as I prepare for a nepotistically acquired project (thanks Dad…) building a fund raising site with social networking features. Allowing individual users to upload photos to their profile pages will likely rely on a similar configuration. And good to dive into this off the clock the first time around. OK! Now I gotta read some &lt;a href=&quot;http://aws.amazon.com/documentation/&quot;&gt;docs&lt;/a&gt;… &lt;/p&gt;

</description>
        <pubDate>Sun, 28 Sep 2014 13:03:20 -0400</pubDate>
        <link>http://yourdomain.com/music-tech,/assets,/heroku/2014/09/28/heroku-and-the-assets-rabbithole/</link>
        <guid isPermaLink="true">http://yourdomain.com/music-tech,/assets,/heroku/2014/09/28/heroku-and-the-assets-rabbithole/</guid>
      </item>
    
      <item>
        <title>Adapting Chris Wilson&#39;s Metronome for my Drum Machine App</title>
        <description>&lt;p&gt;I’ve been working on a simple drum machine in the browser for several weeks. I’m really excited about this app for several reasons: the entry point for working with the Web Audio API, the chance to hand roll a front end MVC stucture, attempting to style a vintage feeling drum machine…. 
AND - I’ll likely explore each of these elements in greater depth soon. &lt;/p&gt;

&lt;p&gt;But in building a drum machine, I quickly realized that using Javascript’s setTimeout method would be very lacking for scheduling audio. Javascript in the browser is built to FEEL asynchronous. Check out &lt;a href=&quot;http://ejohn.org/blog/how-javascript-timers-work/&quot;&gt;this article&lt;/a&gt;. The browser’s API is constantly assessing JS function calls, and asking ‘do I have the resources to do this now?’. Callbacks can be deferred for processes that demand lots of resources. &lt;/p&gt;

&lt;p&gt;So - when I need a dependable down beat in a music app, if I exclusively depend on JS timers, I will inevitably get dropped beats, and musical hiccups. 
Not so cool. &lt;/p&gt;

&lt;p&gt;LUCKILY - 
In the nonstop google search that seems to be my life lately, I stumbled upon the work of an awesome engineer named &lt;a href=&quot;http://cwilso.com/&quot;&gt;Chris Wilson&lt;/a&gt;, and this &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/audio/scheduling/&quot;&gt;awesome article&lt;/a&gt; he wrote about scheduling audio in the browser. &lt;/p&gt;

&lt;p&gt;Mr Wilson built a rock solid (comparatively) metronome, &lt;a href=&quot;https://github.com/cwilso/metronome&quot;&gt;with the code publically available on GitHub&lt;/a&gt;. Wow. &lt;/p&gt;

&lt;p&gt;Wilson’s metronome schedules audio via the clock in the Web Audio API, a clock that runs on a separate thread and is nearly as dependable as a DAW for scheduling. This feature is available in most modern browsers. NICE. The metronome works in concert with setTimeout, checking at regular intervals if the next beat is scheduled and if the tempo has changed. For more details on specs and the interaction of the setTimeout with WAAPI clock, I highly recommend Wilson’s &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/audio/scheduling/&quot;&gt;article&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;So, with this wonderful OSS find, I am able to move forward building a musically dependable drum machine! &lt;/p&gt;

&lt;p&gt;But -  my design goals with the project include attempting a hand rolled Front End MVC structure, and to hold to Object Oriented Design as best as I can. Wilson’s metronome, while accurate and elegant, seems more procedurally designed. And while concerns of the metronome are broken out to separate functions, I want to encapsulate responsibility in objects. &lt;/p&gt;

&lt;p&gt;Get ready kids, it’s time to REFACTOR!!!&lt;/p&gt;

&lt;p&gt;The metronome itself seems to belong squarely in the M camp of MVC. My goal then is to build a metronome model that is ONLY concerned with scheduling notes according to the specified tempo. No views allowed. Also I named it MetroGnome. Because its funny. And at this point, I only want to schedule samples in use in an instance of the drum machine. No synthesis. Bye Bye Oscillator. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/avifoxi/browser-drum-machine/blob/master/app/assets/javascripts/models/metronome.js&quot;&gt;Here&lt;/a&gt; is my most current iteration.&lt;/p&gt;

&lt;p&gt;Waddya think?&lt;/p&gt;

</description>
        <pubDate>Sat, 20 Sep 2014 13:03:20 -0400</pubDate>
        <link>http://yourdomain.com/music-tech/2014/09/20/adapting-metronome-oojs/</link>
        <guid isPermaLink="true">http://yourdomain.com/music-tech/2014/09/20/adapting-metronome-oojs/</guid>
      </item>
    
      <item>
        <title>All dressed up, looking for a place to go!</title>
        <description>&lt;p&gt;It has been a whirlwind 19 weeks as a student at Dev Bootcamp. When I started in April, I had a solid grasp of how to print ‘hello world’ to the console.&lt;/p&gt;

&lt;p&gt;And now - I can confidently design a database backed application from top to bottom, in my choice of frameworks, and track the whole process in Git. WOW. &lt;/p&gt;

&lt;p&gt;So, what now?&lt;/p&gt;

&lt;p&gt;I am in the process of putting my best face forward in my search for a job. That means some solid housekeeping on my LinkedIn profile, resume building, building this very blog site, and solidifying my portfolio. I will keep you all appraised of my progress with this blog. &lt;/p&gt;

&lt;p&gt;Thanks for reading! &lt;/p&gt;

</description>
        <pubDate>Mon, 15 Sep 2014 13:03:20 -0400</pubDate>
        <link>http://yourdomain.com/process/2014/09/15/welcome-to-jekyll/</link>
        <guid isPermaLink="true">http://yourdomain.com/process/2014/09/15/welcome-to-jekyll/</guid>
      </item>
    
  </channel>
</rss>
